#!/bin/bash
############################################################################################
#Include file lib in same dir as this file
. $(dirname $0)"/lib"

#TODO hacer backup autom√°tico

############################################################################################
function install_noip
{
    msgrun "\n installing no-ip on this server"
    apt-get install make
    apt-get -y install gcc
    cd /usr/local/src/
    wget http://www.noip.com/client/linux/noip-duc-linux.tar.gz
    tar xf noip-duc-linux.tar.gz
    cd noip-2.1.9-1/
    make install
    msginfo "Please answer some questions"
    #Please enter login/email: jobiols
    #Please enter password: veconceR
    #contestar preguntas sobre defaults y grupos.
    rm /usr/local/src/noip-duc-linux.tar.gz
    #Poner el script en init.d
    cp /usr/local/src/noip-2.1.9-1/debian.noip2.sh  /etc/init.d/
    #Make script executable
    chmod +x /etc/init.d/debian.noip2.sh
    #hacer que se ejecute al booteo
    update-rc.d debian.noip2.sh defaults
    #arrancar y parar el demonio
    msgrun "Starting no-ip daemon"
    /etc/init.d/debian.noip2.sh restart
    msgdone "no-ip service running"
}

############################################################################################
function list_all_clients
{
    msginfo "ports"
    for ((i=0 ; i<${#port[@]} ; i++))
    do
        msginfo "Port ${port[i]} for client ${client[i]}"
    done

    msginfo "images"
    for ((i=0 ; i<${#images[@]} ; i++))
    do
        msginfo "  ${images[i]}"
    done
}

############################################################################################
#Levantar container para convertir archivos de aeroo $AEROO
function run_aeroo
{
    msgrun "Running ${AEROO}"
    if ! docker run -d \
	    -p 8989:8989 \
	    --name="aeroo_docs" \
    	--restart=always \
	    ${AEROO} ;
	then
	    msgerror "starting ${AEROO}"
 	    exit 1
 	fi
 	msgdone "${AEROO} up and running"
}

############################################################################################
#Levantar postgresql $POSTGRES
function run_postgres
{
    msgrun "Running ${POSTGRES}"
    if ! docker run -d \
	    -e POSTGRES_USER=odoo \
	    -e POSTGRES_PASSWORD=odoo \
	    -v ~/postgresql:/var/lib/postgresql/data \
	    --restart=always \
	    --name db-odoo \
	    ${POSTGRES} ;
	then
	    msgerror "starting ${POSTGRES}"
 	    exit 1
	fi
 	msgdone "${POSTGRES} up and running"
}

function run_database
{
    run_aeroo
    run_postgres
}

############################################################################################
#Levantar odoo
function run_odoo
{
    if [ ${CLIENT} = 'str' ] ; then
      PORT="8070"
    fi
    PORT="8070"

    msgrun "Running ${ODOO} on client ${CLIENT}"
    if ! docker run -d \
        --link aeroo_docs:aeroo \
        -p 127.0.0.1:${PORT}:8069 \
        -p 127.0.0.1:8072:8072 \
        -v ~/odoo80/${CLIENT}/config:/etc/odoo \
        -v ~/odoo80/${CLIENT}/data_dir:/var/lib/odoo \
        -v ~/odoo80/sources:/mnt/extra-addons \
        --link db-odoo:db \
        --restart=always \
        --name ${CLIENT} \
	    ${ODOO} -- --db-filter=${CLIENT}_.* ;
	then
        msgerror "running ${ODOO}"
 	    exit 1
	fi
 	msgdone "${ODOO} up and running on client ${CLIENT}"
}

############################################################################################
function do_up
#starts db and aeroo if needed and the client given or all clients.
{
    msgrun "starting $OPTARG client(s)"
	run_aeroo
	run_postgres

	if ($OPTARG = 'all'); then
 	  for ((i=0 ; i<${#port[@]} ; i++))
	  do
	    msgrun"Starting on ${port[i]} Client ${client[i]} "
        port=${port[i]}
        client=${client[i]}
	    run_odoo
	  done
	else
        client=""
        for ((i=0 ; i<${#client[@]} ; i++))
        do
            if ($OPTARG=client[i]) ; then
                port=${port[i]}
                client=${client[i]}
            fi
        done
        if (client != "") ; then
            run_odoo
        else
            msgerror "Unknown client $OPTARG"
        fi
	fi
}

############################################################################################
function do_down
{
	msgrun "down all images"
    for ((i=0 ; i<${#images[@]} ; i++))
    do
        msgrun "down ${images[i]}"
	    if ! docker stop ${images[i]} ; then
 	        msgerror "fail stoping ${images[i]}"
 	    fi
	    if ! docker rm ${images[i]} ; then
 	        msgerror "fail removing ${images[i]}"
 	    fi
    done
    msgdone "All images ok"
}

############################################################################################
function do_pull
{
	msgrun "pulling all images for odoo V8 adhoc"
    for ((i=0 ; i<${#images[@]} ; i++))
    do
        msgrun "Pulling ${images[i]}"
	    if ! docker pull ${images[i]} ; then
 	        msgerror "fail pulling ${images[i]}"
 	        exit 1
 	    fi
    done
    msgdone "All images ok"
}

############################################################################################
function console_mode
{
    CLIENT=$OPTARG
    msgrun "Running ${ODOO} on client ${CLIENT} in console mode"
    if ! docker run -it --rm \
        --link aeroo_docs:aeroo \
        -p 127.0.0.1:8069:8069 \
        -p 127.0.0.1:8072:8072 \
        -v ~/odoo80/${CLIENT}/config:/etc/odoo \
        -v ~/odoo80/${CLIENT}/data_dir:/var/lib/odoo \
        -v ~/odoo80/sources:/mnt/extra-addons \
        --link db-odoo:db \
        --entrypoint=/bin/bash \
        --name ${CLIENT} \
	    ${ODOO} ;
	then
        msgerror "running ${ODOO}"
 	    exit 1
	fi
 	msgdone "${ODOO} up and running on developer mode ${CLIENT}"
}

############################################################################################
function developer_mode
{
	msgrun "developer mode for $OPTARG coming soon"
}

############################################################################################
function install_odoo
{
    msgrun "Installing odoo repos"
    cd
    mkdir postgresql
    mkdir -p odoo80/sources
    cd odoo80
    chmod 777 -R sources/
    cd sources
    git clone -b 8.0 https://github.com/ingadhoc/odoo-addons
    git clone -b 8.0 https://github.com/ingadhoc/odoo-argentina
    git clone -b 8.0 https://github.com/aeroo/aeroo_reports
    git clone -b 8.0 https://github.com/OCA/server-tools
    git clone -b 8.0 https://github.com/OCA/web
    msgdone "Installing done"
}
############################################################################################
function run_image_client
{
    CLIENT=$OPTARG
    run_odoo
}

############################################################################################
function install_odoo_client
{
    msgrun "Installing odoo instance for client $OPTARG"
    CLIENT=$OPTARG

    cd ~/odoo80
    mkdir -p ${CLIENT}/config
    mkdir -p ${CLIENT}/data_dir
    chmod 777 -R ${CLIENT}/config/ ${CLIENT}/data_dir/

    msgrun "Creating config file for client $OPTARG"
    # Crear archivo de configuracion despues del -- se pueden pasar todas las opciones que se quieran almacenar en el .conf, como por ejemplo path a nuevos addons que se ubiquen en la carpeta sources --addons-path)
    docker run --rm -p 127.0.0.1:8069:8069 -p 127.0.0.1:8072:8072 \
        -v ~/odoo80/${CLIENT}/config:/etc/odoo \
        -v ~/odoo80/sources:/mnt/extra-addons \
        -v ~/odoo80/${CLIENT}/data_dir:/var/lib/odoo \
        --name ${CLIENT} \
        adhoc/odoo-adhoc:8.0 -- --stop-after-init -s \
        --addons-path=/mnt/extra-addons/odoo-argentina,/mnt/extra-addons/odoo-addons,/mnt/extra-addons/aeroo_reports,/mnt/extra-addons/server-tools,/mnt/extra-addons/web
    msgdone "Installing done"
}

############################################################################################
function stop_image_client
{
    CLIENT=$OPTARG
	msgrun "stop image for client ${CLIENT}"
    if ! docker stop ${CLIENT} ; then
        msgerror "fail stoping ${CLIENT}"
        exit 1
    fi
    if ! docker rm ${CLIENT} ; then
        msgerror "fail removing ${images[i]}"
        exit 1
    fi
    msgdone "client ${CLIENT} stopped"
}

function stop_database
{
    for name in db-odoo aeroo_docs
    do
        msgrun "stoping image ${name}"
        if ! docker stop ${name} ; then
            msgerror "fail stoping ${name}"
            exit 1
        fi
        if ! docker rm ${name} ; then
            msgerror "fail removing ${name}"
            exit 1
        fi
    done
}
############################################################################################
function help
{
    msginfo "Manages odoo environment in this VPS"
    msginfo
    msginfo "  -I           install odoo repos"
    msginfo "  -i [client]  install odoo instance for client"
    msginfo "  -R           run database and aeroo images"
    msginfo "  -S           stop database and aeroo images"
    msginfo "  -r [client]  run image client"
    msginfo "  -s [client]  stop image client"
    msginfo "  -p           pull all images"
    msginfo "  -n           install no-ip on this server"
    msginfo "  -l           list all clients in this server"
    msginfo "  -h           this help"
    msginfo "  -d [client]  start CLIENT in developer mode"
    msginfo "  -c [client]  start console mode for CLIENT"

    msginfo "###########################################"
    msginfo "   dir struct on host"
    msginfo "       ~/postgresql"
    msginfo "	    ~/odoo80/sources"
    msginfo "	    ~/odoo80/${client}/config"
    msginfo "	    ~/odoo80/${client}/data_dir"
}

# test if user is root
if [[ $EUID -ne 0 ]]; then
   msgerror "This script must be run as root"
   exit 1
fi

while getopts "Ii:pnlhd:c:r:s:RS" opt; do
  case $opt in
    I)  install_odoo
        ;;
    i)  install_odoo_client
        ;;
    p)  do_pull
	    exit 0
	    ;;
    n)  install_noip
	    exit 0
	    ;;
    l)  list_all_clients
	    exit 0
	    ;;
    h)  help
        exit 0
        ;;
    d)  developer_mode
        exit 0
        ;;
    c)  console_mode
        exit 0
        ;;
    r)  run_image_client
        ;;
    s)  stop_image_client
        ;;
    R)  run_database
        ;;
    S)  stop_database
        ;;
   [?]) help
        exit 1
        ;;
  esac
done